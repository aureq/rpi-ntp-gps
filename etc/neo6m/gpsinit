#!/usr/bin/python


from os.path import dirname
import argparse
import io
import os
import struct
import subprocess
import sys
import termios
import time
import tty
import shlex

import serial


PREAMBLE = 0x2404
EPO_CMD = 0x02d2
EOW = 0x0a0d
UART_CMD = 253
NMEA_SPEED = "PUBX,41,1,0007,0003,{0},0"

INIT_COMMANDS = [
        "PUBX,40,RMC,0,1,0,0,0,0",
        "PUBX,40,GLL,0,1,0,0,0,0",
        "PUBX,40,GGA,0,1,0,0,0,0",
        "PUBX,40,ZDA,0,1,0,0,0,0",
        "PUBX,40,ZDG,0,1,0,0,0,0",
        "PUBX,40,VTG,0,0,0,0,0,0",
        "PUBX,40,GST,0,0,0,0,0,0",
        "PUBX,40,GBS,0,0,0,0,0,0",
        "PUBX,40,GSA,0,1,0,0,0,0",
        "PUBX,40,GSV,0,1,0,0,0,0"
]

baudrate = {
    termios.B4800: 4800,
    termios.B9600: 9600,
    termios.B19200: 19200,
    termios.B38400: 38400,
    termios.B57600: 57600,
    termios.B115200: 115200,
}

def crc8(d):
    crc = 0
    for b in bytearray(d):
        crc ^= (b & 0xff)
    return crc

def send_string(fg, string):
    fg.write("$%s*%02x\r\n" % (string, crc8(string)))
    fg.flush()

def convert_arg_line_to_args(arg_line):
    for arg in arg_line.split():
        if not arg.strip():
            continue
        yield arg

def process_command(fg, line):
    line = str(line)
    send_string(fg, line[0:])
    return fg

def get_port(device):
    speed = get_port_speed(device)
    fg = serial.Serial(port=device, timeout=5, baudrate=speed)
    return fg

def get_port_speed(device):
    command = 'stty < {0}'.format(device)
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, close_fds=True, shell=True)
    o = p.communicate()[0]
    baudrate = int(o.split()[1])
    return baudrate

def set_port_speed(device, speed):
    fg = serial.Serial(port=device, timeout=5, baudrate=speed)
    tty.setraw(fg, tty.TCSANOW)
    fg.flushInput()
    return fg

def main():
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@',
                description="Initialized GPS to known state",
                epilog="You can use '@filename' to read arguments from a file.")

    group = parser.add_mutually_exclusive_group()
    parser.convert_arg_line_to_args = convert_arg_line_to_args
    parser.add_argument("--speed", type=int, default=115200, dest="speed", help="Interface speed", choices=[4800, 9600, 19200, 38400, 57600, 115200])
    parser.add_argument("--init_command", metavar="<init_command>", dest="init_command", help="A single NMEA initialization command")
    group.add_argument("--init_port_first", action='store_true', dest="init_port", help="Initialize communication port first and then nmea")
    group.add_argument("--init_nmea_first", action='store_true', dest="init_nmea", help="Initialize NMEA first and then communication port")
    parser.add_argument("output_device", metavar="<gps_device>", help="GPS serial device such as '/dev/gps*'")

    args = parser.parse_args()

    # check if device is already in use
    #p = subprocess.Popen("lsof -FpcL %s 2>/dev/null" % args.output_device, stdin=subprocess.PIPE, stdout=subprocess.PIPE, close_fds=True, shell=True)
    #o = p.communicate()[0]
    #if len(o) > 0:
    #    lines = o.split('\n')
    #    print >> sys.stderr, "ERROR: Device %s is open by PID: %s  PROG: %s  USER: %s" % (args.output_device, lines[0][1:], lines[1][1:], lines[2][1:])
    #    return 1;

    fg = get_port(args.output_device)

    if args.init_port == True:
        fg = set_port_speed(args.output_device, args.speed)
        if fg is None: return 1

    if args.init_command:
        fg = process_command(fg, args.init_command)
    else:
        if args.init_port == True:
            print "Speed command: '{}'".format(NMEA_SPEED.format(args.speed))
            fg = process_command(fg, NMEA_SPEED.format(args.speed))

        for cmd in INIT_COMMANDS:
            print "Init command: '{}'".format(cmd)
            fg = process_command(fg, cmd)

        if args.init_port != True:
            print "Speed command: '{}'".format(NMEA_SPEED.format(args.speed))
            fg = process_command(fg, NMEA_SPEED.format(args.speed))

    if args.init_port != True:
        fg = set_port_speed(args.output_device, args.speed)
        if fg is None: return 1

    tty.setraw(fg, tty.TCSANOW)
    fg.close()
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

